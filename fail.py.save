import pygame
from random import randint

"""
This file is game by pygame
Create by: Sergey Tovmasyan
Date: 02.06.2024
"""
pygame.init()
pygame.time.set_timer(pygame.USEREVENT, 3000)
W, H = 1200, 800
scanner = pygame.display.set_mode((W, H))
clock = pygame.time.Clock()
FPS = 60
fon_game = pygame.image.load('photo_5393226249775733978_y.jpg').convert()
box = pygame.image.load('photo_5397686380039105303_m.jpg').convert()

f = pygame.font.SysFont('arial', 70)

box_rect = box.get_rect(centerx=W // 2, bottom=H)
ball_images = ['Screenshot_22.png', 'Screenshot_23.png', 'Screenshot_24.png', 'Screenshot_25.png', 'Screenshot_26.png']
balls_surf = [pygame.image.load(ball).convert() for ball in ball_images]

class Ball(pygame.sprite.Sprite):
    """
    Class: Ball inhentance from sprite
    its about ball and its down
    """

    def __init__(self, x, speed, image):
        """
        Function: init
        Brief: The functions is inicilzation image and rect
        Params: speed of ball,image of ball and coordination
        Return: 0
        """

        self.image = image
        self.image.set_colorkey((255, 255, 255))
        self.rect = self.image.get_rect(center=(x, 0))
        self.speed = speed
    def update(self):
        """
        Function: update
        Brief: the speed of ball += speed
        Params: speed
        Return:0
        """

        self.rect.y += self.speed
balls = []
game_score = 0
misses = 0
def create_ball():
    """
    Function: create_ball
    Brief: Tthe functions returns the whole content of the file
    Params: fname: name of the input file
    Return:	returns the content of the file as a list
    """

    indx = randint(0, 4)
    x = randint(20, W - 20)
    speed = randint(1, 5)
    balls.append(Ball(x, speed, balls_surf[indx]))
def collide_balls():
    global game_score
    for ball in balls:
        if box_rect.collidepoint(ball.rect.center):
            game_score += 1
            balls.remove(ball)
speed = 20
#create_ball()
game_over = False

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            exit()
        elif event.type == pygame.USEREVENT:
            create_ball()
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        box_rect.x -= speed
        if box_rect.x < 0:
            box_rect.x = 0
    elif keys[pygame.K_RIGHT]:
        box_rect.x += speed
        if box_rect.x > W - box_rect.width:
            box_rect.x = W - box_rect.width
    if not game_over:
        collide_balls()
        for ball in balls[:]:
            if ball.rect.y >= H - 20:
                misses += 1
                balls.remove(ball)
                if misses >= 3:
                    game_over = True

        scanner.blit(fon_game, (0, 0))
        score = f.render(f'{game_score}', 1, (0, 0, 0))
        scanner.blit(score, (200, 100))
        misse = f.render(f'{misses}',1,(0,0,0))
        scanner.blit(misse,(200,150))
        for ball in balls:
            scanner.blit(ball.image, ball.rect)
            ball.update()
        scanner.blit(box, box_rect)
    else:
        game_over_text = f.render('GAME OVER', 2, (255, 0, 0))
        scanner.blit(game_over_text, (W // 2 - 200, H // 2))

    pygame.display.update()
    clock.tick(FPS)
if __name__ == "__main__":
    main()
